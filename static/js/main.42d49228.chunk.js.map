{"version":3,"sources":["components/NavBar.js","components/Tile.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","process","this","props","gameMessage","id","currentScore","topScore","React","Component","tile","name","image","handlePicked","src","alt","onClick","key","data-id","App","event","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateScore","setState","characters","shuffleArray","state","array","y","x","i","length","Math","floor","random","callback","newState","selectedTiles","includes","toUpperCase","push","alertWinner","role","style","backgroundImage","backgroundSize","map","char","Tile","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42d49228.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass NavBar extends React.Component {    \r\n    render() {\r\n        return (\r\n            <header>\r\n                <div className=\"navbar navbar-light bg-light shadow-sm fixed-top\">\r\n                    <div className=\"container d-flex justify-content-between\">\r\n                        <a href={process.env.PUBLIC_URL} className=\"navbar-brand d-flex align-items-center\">\r\n                            <strong>DBZ Clicky Game!</strong>\r\n                        </a>\r\n                        <div className=\"message blinking\">{this.props.gameMessage}</div>\r\n                        <div className=\"scoreBoard\">\r\n                            <div>\r\n                                <span>Current Score: </span><span id=\"currentScore\">{this.props.currentScore}</span>\r\n                            </div>\r\n                            <div>\r\n                                <span>Top Score: </span><span id=\"topScore\">{this.props.topScore}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default NavBar;","import React from \"react\";\r\n\r\nconst tile = ({ id, name, image, handlePicked }) => (\r\n    <div className=\"col-md-3\">\r\n        <div className=\"imgWrapper\">\r\n            <img src={image} alt={name} name={name} onClick={handlePicked} key={id} data-id={id}/>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default tile;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar.js';\nimport Tile from './components/Tile.js';\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      characters: characters,\n      selectedTiles: [],\n      topScore: 0,\n      gameMessage: \"press any tile to start\"\n    }\n  }\n\n  // callback function to handle clicks\n  handlePicked = event => {\n    const name = event.target.attributes.getNamedItem(\"name\").value;\n    this.shuffleCharacters();\n    this.checkGuess(name, this.updateScore)\n  }\n\n  // callback function to shuffle the characters\n  shuffleCharacters = () => {\n    this.setState(this.characters = this.shuffleArray(this.state.characters))\n  }\n\n  // callback function to assist shuffling character array\n  shuffleArray = (array) => {\n    var y, x, i;\n    for (i = array.length - 1; i > 0; i--) {\n      y = Math.floor(Math.random() * (i + 1));\n      x = array[i];\n      array[i] = array[y];\n      array[y] = x;\n    }\n    return array;\n  }\n\n  // callback function to check if tile has already been clicked\n  checkGuess = (name, callback) => {\n    const newState = { ...this.state };\n    if (newState.selectedTiles.includes(name)) {\n      newState.gameMessage = `YOU ALREADY PICKED \"${name.toUpperCase()}\"!`\n      newState.selectedTiles = []\n      // reset the game with new state\n      this.setState(newState)\n    } \n    else {\n      newState.selectedTiles.push(name)\n      newState.gameMessage = `GOOD CHOICE!`\n      this.setState(newState)\n    }\n    callback(newState, this.alertWinner)\n  }\n\n  // callback function to update the score state\n  updateScore = (newState, callback) => {\n    if (newState.selectedTiles.length > newState.topScore) {\n      newState.topScore++\n      this.setState(newState)\n    }\n    callback(newState)\n  }\n\n  // callback function to reset game when max score reached\n  alertWinner = (newState) => {\n    if (newState.selectedTiles.length === 16) {\n      newState.gameMessage = \"CHAMPION!\";\n      newState.selectedTiles = [];\n      this.setState(newState)\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          gameMessage={this.state.gameMessage}\n          currentScore={this.state.selectedTiles.length}\n          topScore={this.state.topScore}\n        />\n        <main role=\"main\">\n          <section className=\"jumbotron\" style={{backgroundImage: 'url(' + process.env.PUBLIC_URL + '/img/header.jpg)', backgroundSize: 'cover'}}>\n            <div className=\"container\">\n              <h1>Dragonball Z Clicky Game!</h1>\n              <p className=\"lead\">Click on a an image to earn points, but don't click on any more than once!</p>\n            </div>\n          </section>\n          <div className=\"py-3 bg-light\">\n            <div className=\"container gameArea\">\n              <div className=\"row\">\n                {this.state.characters.map(char => (<Tile id={char.id} name={char.name} image={char.image} key={char.id} handlePicked={this.handlePicked} /> ))}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}